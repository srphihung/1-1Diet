{"ast":null,"code":"import { useState, useEffect, useRef } from 'react';\nvar initialized = [];\n\nfunction useGoogleMapsApi(apiKey) {\n  var _a = useState(),\n      googleApi = _a[0],\n      setGoogleApi = _a[1];\n\n  useEffect(function () {\n    if (window.google) {\n      // if window.google object is already available just use it\n      setGoogleApi(window.google);\n      return;\n    }\n\n    var src = \"https://maps.googleapis.com/maps/api/js?key=\" + apiKey;\n    var existingScript = initialized.find(function (el) {\n      return el.src === src;\n    });\n\n    var onLoad = function () {\n      setGoogleApi(window.google);\n    };\n\n    if (existingScript) {\n      // if script tag was added by other element just check when it is loaded\n      existingScript.addEventListener(\"load\", onLoad);\n      return;\n    }\n\n    var script = document.createElement(\"script\");\n    script.src = src;\n    script.async = true;\n    script.defer = true;\n    script.addEventListener(\"load\", onLoad);\n    document.head.appendChild(script);\n    initialized.push(script);\n    return function () {\n      script.removeEventListener(\"load\", onLoad);\n      script.remove();\n      initialized.splice(initialized.findIndex(function (el) {\n        return el.src === src;\n      }), 1);\n    };\n  }, [apiKey]);\n  return googleApi;\n}\n\nfunction useGoogleMaps(apiKey, options) {\n  var google = useGoogleMapsApi(apiKey);\n  var ref = useRef(null);\n\n  var _a = useState(),\n      map = _a[0],\n      setMap = _a[1];\n\n  useEffect(function () {\n    if (!google || !ref) {\n      return;\n    }\n\n    setMap(new google.maps.Map(ref.current, options));\n  }, [google, ref]);\n  return {\n    ref: ref,\n    map: map,\n    google: google\n  };\n}\n\nexport { useGoogleMaps, useGoogleMapsApi };","map":{"version":3,"sources":["../src/useGoogleMapsApi.ts","../src/useGoogleMaps.ts"],"names":[],"mappings":";AAEA,IAAM,WAAW,GAAwB,EAAzC;;SACgB,gB,CAAiB,M,EAAc;AACvC,MAAA,EAAA,GAAA,QAAA,EAAA;AAAA,MAAC,SAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAY,YAAA,GAAA,EAAA,CAAA,CAAA,CAAZ;;AAEN,EAAA,SAAS,CAAC,YAAA;AACR,QAAK,MAAc,CAAC,MAApB,EAA4B;;AAE1B,MAAA,YAAY,CAAE,MAAc,CAAC,MAAjB,CAAZ;AACA;AACD;;AACD,QAAM,GAAG,GAAG,iDAAiD,MAA7D;AAEA,QAAM,cAAc,GAAG,WAAW,CAAC,IAAZ,CAAiB,UAAA,EAAA,EAAE;AAAI,aAAA,EAAE,CAAC,GAAH,KAAW,GAAX;AAAc,KAArC,CAAvB;;AAEA,QAAM,MAAM,GAAG,YAAA;AACb,MAAA,YAAY,CAAE,MAAc,CAAC,MAAjB,CAAZ;AACD,KAFD;;AAGA,QAAI,cAAJ,EAAoB;;AAElB,MAAA,cAAc,CAAC,gBAAf,CAAgC,MAAhC,EAAwC,MAAxC;AACA;AACD;;AAED,QAAM,MAAM,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAf;AACA,IAAA,MAAM,CAAC,GAAP,GAAa,GAAb;AACA,IAAA,MAAM,CAAC,KAAP,GAAe,IAAf;AACA,IAAA,MAAM,CAAC,KAAP,GAAe,IAAf;AACA,IAAA,MAAM,CAAC,gBAAP,CAAwB,MAAxB,EAAgC,MAAhC;AACC,IAAA,QAAQ,CAAC,IAAT,CAAsB,WAAtB,CAAkC,MAAlC;AACD,IAAA,WAAW,CAAC,IAAZ,CAAiB,MAAjB;AAEA,WAAO,YAAA;AACL,MAAA,MAAM,CAAC,mBAAP,CAA2B,MAA3B,EAAmC,MAAnC;AACA,MAAA,MAAM,CAAC,MAAP;AACA,MAAA,WAAW,CAAC,MAAZ,CACE,WAAW,CAAC,SAAZ,CAAsB,UAAA,EAAA,EAAE;AAAI,eAAA,EAAE,CAAC,GAAH,KAAW,GAAX;AAAc,OAA1C,CADF,EAEE,CAFF;AAID,KAPD;AAQD,GAnCQ,EAmCN,CAAC,MAAD,CAnCM,CAAT;AAqCA,SAAO,SAAP;AACF;;SCzCgB,a,CAAc,M,EAAgB,O,EAA+B;AAC3E,MAAM,MAAM,GAAG,gBAAgB,CAAC,MAAD,CAA/B;AACA,MAAM,GAAG,GAAG,MAAM,CAAiB,IAAjB,CAAlB;;AACM,MAAA,EAAA,GAAA,QAAA,EAAA;AAAA,MAAC,GAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAM,MAAA,GAAA,EAAA,CAAA,CAAA,CAAN;;AAEN,EAAA,SAAS,CAAC,YAAA;AACR,QAAI,CAAC,MAAD,IAAW,CAAC,GAAhB,EAAqB;AACnB;AACD;;AACD,IAAA,MAAM,CAAC,IAAI,MAAM,CAAC,IAAP,CAAY,GAAhB,CAAoB,GAAG,CAAC,OAAxB,EAAiC,OAAjC,CAAD,CAAN;AACD,GALQ,EAKN,CAAC,MAAD,EAAS,GAAT,CALM,CAAT;AAOA,SAAO;AAAE,IAAA,GAAG,EAAA,GAAL;AAAO,IAAA,GAAG,EAAA,GAAV;AAAY,IAAA,MAAM,EAAA;AAAlB,GAAP;AACD","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst initialized: HTMLScriptElement[] = [];\nexport function useGoogleMapsApi(apiKey: string) {\n  const [googleApi, setGoogleApi] = useState();\n\n  useEffect(() => {\n    if ((window as any).google) {\n      // if window.google object is already available just use it\n      setGoogleApi((window as any).google);\n      return;\n    }\n    const src = \"https://maps.googleapis.com/maps/api/js?key=\" + apiKey;\n\n    const existingScript = initialized.find(el => el.src === src);\n\n    const onLoad = () => {\n      setGoogleApi((window as any).google);\n    };\n    if (existingScript) {\n      // if script tag was added by other element just check when it is loaded\n      existingScript.addEventListener(\"load\", onLoad);\n      return;\n    }\n\n    const script = document.createElement(`script`);\n    script.src = src;\n    script.async = true;\n    script.defer = true;\n    script.addEventListener(`load`, onLoad);\n    (document.head as any).appendChild(script);\n    initialized.push(script);\n\n    return () => {\n      script.removeEventListener(`load`, onLoad);\n      script.remove();\n      initialized.splice(\n        initialized.findIndex(el => el.src === src),\n        1,\n      );\n    };\n  }, [apiKey]);\n\n  return googleApi;\n}\n","import { useState, useEffect, useRef } from \"react\";\nimport { useGoogleMapsApi } from \"./useGoogleMapsApi\";\n\nexport function useGoogleMaps(apiKey: string, options: google.maps.MapOptions) {\n  const google = useGoogleMapsApi(apiKey);\n  const ref = useRef<HTMLDivElement>(null);\n  const [map, setMap] = useState();\n\n  useEffect(() => {\n    if (!google || !ref) {\n      return;\n    }\n    setMap(new google.maps.Map(ref.current, options));\n  }, [google, ref]);\n\n  return { ref, map, google };\n}\n"]},"metadata":{},"sourceType":"module"}
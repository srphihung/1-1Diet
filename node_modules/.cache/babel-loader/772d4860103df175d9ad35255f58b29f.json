{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srphi\\\\Documents\\\\Projects\\\\1-1Diet\\\\src\\\\components\\\\register.component.tsx\";\nimport { Component } from \"react\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport AuthService from \"../services/auth.service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Register extends Component {\n  constructor(props) {\n    super(props);\n    this.handleRegister = this.handleRegister.bind(this);\n    this.state = {\n      username: \"\",\n      password: \"\",\n      successful: false,\n      message: \"\"\n    };\n  }\n\n  validationSchema() {\n    return Yup.object().shape({\n      username: Yup.string().test(\"len\", \"The username must be between 3 and 20 characters.\", val => val && val.toString().length >= 3 && val.toString().length <= 20).required(\"This field is required!\"),\n      password: Yup.string().test(\"len\", \"The password must be between 6 and 40 characters.\", val => val && val.toString().length >= 6 && val.toString().length <= 40).required(\"This field is required!\")\n    });\n  }\n\n  handleRegister(formValue) {\n    const {\n      username,\n      password\n    } = formValue;\n    this.setState({\n      message: \"\",\n      successful: false\n    });\n    AuthService.register(username, password).then(response => {\n      this.setState({\n        message: response.data.message,\n        successful: true\n      });\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      this.setState({\n        successful: false,\n        message: resMessage\n      });\n    });\n  }\n\n  render() {\n    const {\n      successful,\n      message\n    } = this.state;\n    const initialValues = {\n      username: \"\",\n      password: \"\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-12\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card card-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"//ssl.gstatic.com/accounts/ui/avatar_2x.png\",\n          alt: \"profile-img\",\n          className: \"profile-img-card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: initialValues,\n          validationSchema: this.validationSchema,\n          onSubmit: this.handleRegister,\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: [!successful && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"username\",\n                  children: \" Username \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  name: \"username\",\n                  type: \"text\",\n                  className: \"form-control\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"username\",\n                  component: \"div\",\n                  className: \"alert alert-danger\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"password\",\n                  children: \" Password \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  name: \"password\",\n                  type: \"password\",\n                  className: \"form-control\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"password\",\n                  component: \"div\",\n                  className: \"alert alert-danger\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  className: \"btn btn-primary btn-block\",\n                  children: \"Sign Up\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 33\n            }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: successful ? \"alert alert-success\" : \"alert alert-danger\",\n                role: \"alert\",\n                children: message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/srphi/Documents/Projects/1-1Diet/src/components/register.component.tsx"],"names":["Component","Formik","Field","Form","ErrorMessage","Yup","AuthService","Register","constructor","props","handleRegister","bind","state","username","password","successful","message","validationSchema","object","shape","string","test","val","toString","length","required","formValue","setState","register","then","response","data","error","resMessage","render","initialValues"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\n\r\ntype Props = {};\r\n\r\ntype State = {\r\n    username: string,\r\n    password: string,\r\n    successful: boolean,\r\n    message: string\r\n};\r\n\r\nexport default class Register extends Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.handleRegister = this.handleRegister.bind(this);\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\",\r\n            successful: false,\r\n            message: \"\"\r\n        };\r\n    }\r\n\r\n    validationSchema() {\r\n        return Yup.object().shape({\r\n            username: Yup.string()\r\n                .test(\r\n                    \"len\",\r\n                    \"The username must be between 3 and 20 characters.\",\r\n                    (val: any) =>\r\n                        val &&\r\n                        val.toString().length >= 3 &&\r\n                        val.toString().length <= 20\r\n                )\r\n                .required(\"This field is required!\"),\r\n            password: Yup.string()\r\n                .test(\r\n                    \"len\",\r\n                    \"The password must be between 6 and 40 characters.\",\r\n                    (val: any) =>\r\n                        val &&\r\n                        val.toString().length >= 6 &&\r\n                        val.toString().length <= 40\r\n                )\r\n                .required(\"This field is required!\"),\r\n        });\r\n    }\r\n\r\n    handleRegister(formValue: { username: string; password: string }) {\r\n        const { username, password } = formValue;\r\n\r\n        this.setState({\r\n            message: \"\",\r\n            successful: false\r\n        });\r\n\r\n        AuthService.register(\r\n            username,\r\n            password\r\n        ).then(\r\n            response => {\r\n                this.setState({\r\n                    message: response.data.message,\r\n                    successful: true\r\n                });\r\n            },\r\n            error => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n\r\n                this.setState({\r\n                    successful: false,\r\n                    message: resMessage\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { successful, message } = this.state;\r\n\r\n        const initialValues = {\r\n            username: \"\",\r\n            password: \"\",\r\n        };\r\n\r\n        return (\r\n            <div className=\"col-md-12\">\r\n                <div className=\"card card-container\">\r\n                    <img\r\n                        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n                        alt=\"profile-img\"\r\n                        className=\"profile-img-card\"\r\n                    />\r\n\r\n                    <Formik\r\n                        initialValues={initialValues}\r\n                        validationSchema={this.validationSchema}\r\n                        onSubmit={this.handleRegister}\r\n                    >\r\n                        <Form>\r\n                            {!successful && (\r\n                                <div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"username\"> Username </label>\r\n                                        <Field name=\"username\" type=\"text\" className=\"form-control\" />\r\n                                        <ErrorMessage\r\n                                            name=\"username\"\r\n                                            component=\"div\"\r\n                                            className=\"alert alert-danger\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"password\"> Password </label>\r\n                                        <Field\r\n                                            name=\"password\"\r\n                                            type=\"password\"\r\n                                            className=\"form-control\"\r\n                                        />\r\n                                        <ErrorMessage\r\n                                            name=\"password\"\r\n                                            component=\"div\"\r\n                                            className=\"alert alert-danger\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                        <button type=\"submit\" className=\"btn btn-primary btn-block\">Sign Up</button>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n\r\n                            {message && (\r\n                                <div className=\"form-group\">\r\n                                    <div\r\n                                        className={\r\n                                            successful ? \"alert alert-success\" : \"alert alert-danger\"\r\n                                        }\r\n                                        role=\"alert\"\r\n                                    >\r\n                                        {message}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </Form>\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}